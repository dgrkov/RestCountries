# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  server:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: development
    ports:
      - 8080:8080
      - 8000:8000
    environment:
      - SPRING_DATASOURCE_URL=jdbc:mariadb://mariadb:3306/countries
      - SPRING_DATASOURCE_USERNAME=root
      - SPRING_DATASOURCE_PASSWORD=root
      - SPRING_PROFILES_ACTIVE=mariadb
#Use Compose Watch to automatically update your running Compose services as you edit and save your code.
#    develop:
#      watch:
#        - action: rebuild
#          path: .

# The commented out section below is an example of how to define a MariaDB
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker-compose up`.
    depends_on:
       mariadb:
         condition: service_healthy
  mariadb:
     build:
       context: ./database
       dockerfile: Dockerfile
     command: --transaction-isolation=READ-COMMITTED --binlog-format=ROW
     restart: always
     volumes:
       - mysql-data:/var/lib/mysql
     environment:
       - MYSQL_DATABASE=countries
       - MYSQL_USER=countries
       - MYSQL_ROOT_PASSWORD=root
       - MYSQL_PASSWORD=root
     ports:
       - 3306:3306
     expose:
       - 3306
     healthcheck:
       test: [ "CMD", "healthcheck.sh", "--connect", "--innodb_initialized" ]
       start_period: 10s
       interval: 10s
       timeout: 5s
       retries: 3
volumes:
   mysql-data:


